'''
This program is used to run all student submissions in batch and test 
each program against a testcase set saved in a text file.

The program generates report for each submission.

Written by: Arjang Fahim; improvements by: Josh Gilman

version: 1.0.0
'''

#Imports
from cgi import test
import os, re, subprocess, sys
from unittest import TestResult


#This folder contains the submitted assignments from students
assignment_folder = "C://Users//Lewis//Desktop//Fall_2022_Source_Code//New_PA1_328"

#This folder contains reports generated by this program
#For each submission the program generates one report
evaluation_folder = "C:/Users/Lewis/Desktop/Fall_2022_Source_Code/New_PA1_328"

#A text file that contains all test cases (either argv[1] or testcase.txt)
testcase_file = "testcase.txt"
if len(sys.argv) > 1 and sys.argv[1]:
	testcase_file = sys.argv[1]

#Open the test case file for reading
f = open(testcase_file, "r")
testcases_list = f.readlines()
f.close()

#Filter files to get only python files 
files_list =  [f for f in os.listdir(assignment_folder) if f[len(f)-2:len(f)] == "py"]

#Setup the counters
counter = 0
passcount = 0
failcount = 0
finalOutput = ""

#Loop over every file
for f in files_list:
	#Clear out any previous tests
	if os.path.isfile(evaluation_folder + "\\" + f + ".txt"):
		os.remove(evaluation_folder + "\\" + f + ".txt")

	#Create a new text file if it doesn't already exist and open it in append mode
	fh = open(evaluation_folder + "\\" + f + ".txt", "a")

	#Loop over all the test cases
	for tcl in testcases_list:
		#Split up the testcase at every colon, deriving both the test case and the expected result
		tc = tcl.split(":")[0]
		correct_output = tcl.split(":")[1] 

		#Run the test case against the current Python script and get the output
		run_command = "python " + assignment_folder + "/" + f + " " + tc
		output = subprocess.getoutput(run_command)

		#Get the pass/fail status
		testPassed = False
		if output.strip() == correct_output.strip():
			passcount += 1
			testPassed = True
		else:
			failcount += 1
		counter += 1

		#Construct the output for that particular test
		finalOutput += "Test number: {}\n".format(str(counter))
		finalOutput += "Test content: {}\n".format(tc.strip())
		finalOutput += "Expected output: {}\n".format(correct_output.strip())
		finalOutput += "Provided output: {}\n".format(output.strip())
		finalOutput += "Result: \033[{}\033[0m\n\n".format("1;32mPASS" if testPassed else "1;31mFAIL")
		
	#Tally up the total pass/fail score
	finalOutput += "\nTotal tests: {}\n".format(str(counter))
	finalOutput += "Total passes: {}\n".format(str(passcount))
	finalOutput += "Total fails: {}\n".format(str(failcount))
	finalOutput += "Pass percentage: {}%\n".format(str((passcount / counter) * 100))

	#Setup the stripper for ANSI escapes (https://stackoverflow.com/a/14693789)
	ansi_escape = re.compile(r"\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])")

	#Output the results, stripping off ANSI escapes for the output
	print(finalOutput)
	fh.write(ansi_escape.sub("", finalOutput))

	#Close the current file and reset the counters
	fh.close()
	counter = 0
	passcount = 0
	failcount = 0
	finalOutput = ""